<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- 配置 ContextLoaderListener 加载 Spring 配置文件 -->
    <!-- needed for ContextLoaderListener -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--配置字符集-->
    <!-- 配置 CharacterEncodingFilter 解决 POST 请求的字符乱码问题 -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 指定字符集 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- 强制请求进行编码 -->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!-- 强制响应进行编码 -->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!--这个filter执行的顺序，要在其他所有的filter前面-->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 配置 SpringMVC 的前端控制器 -->
    <!-- The front controller of this Spring Web application, responsible for handling all application
    requests -->
    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 以初始化参数的形式指定 SpringMVC 配置文件的位置 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-web-mvc.xml</param-value>
        </init-param>
        <!-- 让 DispatcherServlet 在 Web 应用启动时创建对象、初始化 -->
        <!-- 默认情况：Servlet 在第一次请求的时候创建对象、初始化 -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!-- Map all requests to the DispatcherServlet for handling -->
    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!-- DispatcherServlet 映射的 URL 地址 -->
        <!-- 大白话：什么样的访问地址会交给 SpringMVC 来处理 -->
        <!-- 配置方式一：符合 RESTFUL 风格使用“/” -->
        <!-- <url-pattern>/</url-pattern> -->

        <!-- 配置方式二：请求扩展名 -->
        <!-- 优点1：静态资源xxx.css,xxx.js,xxx.png等等，完全不经过SpringMvc，不需要特殊处理-->
        <!-- 优点2：可以实现伪静态效果，看起来像访问静态的 *.html，其实是访问动态的-->
        <!-- 伪静态：给黑客入侵增加难度。有利于SEO优化，让百度谷歌这样的搜索引擎，更容易找到项目-->
        <!--缺点：不符合RESTFul 风格-->
        <url-pattern>*.html</url-pattern>

        <!--为什么还要配置一个json拓展名-->
        <!--如果一个AJax请求扩展名是html，但是实际服务器给浏览器返回的是json数据，二者就不匹配了，会出现406错误-->
        <!--为了让ajax请求能够顺利拿到JSON格式的响应数据，我们另外配置一个json拓展名-->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>

    <!-- SpringSecurity 的 Filter -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


</web-app>